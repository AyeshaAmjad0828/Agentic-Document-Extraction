\Start Prompt:
 
### Instructions:
You are a data extraction tool capable of extracting data from each page of an invoice.

1. Please extract the data in this invoice and format it to the given output JSON schema.

2. Extract all key-value pairs from the invoice.

3. If there are tables in the invoice, capture all of the rows and columns in the JSON object. 
Even if a column is blank, include it as a key in the JSON object with a null value.

4. If a row is blank denote missing fields with "null" values.

5. If the page contains no charge data, please output an empty JSON object and don't make up any data.

6. Don't interpolate or make up data.

7. Please maintain the table structure of the charges, i.e. capture all of the rows and columns in the JSON object.

8. Ensuring the order of key-value pairs and tabular data aligns with the original text.


The language model must interpret and execute these extraction and formatting instructions accurately.

Perform the task as per above instructions on the following invoice document:
	
	
### INPUT invoice:
	

-----------------Invoice------------------
                              Page 1 of 3

Invoice Number: INV-12345
Customer: XYZ Corp
Invoice Date: 2024-06-01


Item    Quantity    Price     Total
item_1     5         $100      500
item_2     10        $50       500
item_3     6         $10       60

					Subtotal: 1060
					Total GST: 500
					Total Amount: $1560
--------------------------------------------

	
### OUTPUT JSON SCHEMA:


	
{'invoice_number': 'string', 'customer': 'string', 'invoice_date': 'yyyy-mm-dd', 'sub_total': 'number', 'total_GST': 'number', 'total_amount': 'number', 'Line_Items': [{'item': 'string', 'quantity': 'number', 'price': 'number', 'total': 'number'}]}

	
\Start Output:
 {
  "invoice_number": "INV-12345",
  "customer": "XYZ Corp",
  "invoice_date": "2024-06-01",
  "sub_total": 1060,
  "total_GST": 500,
  "total_amount": 1560,
  "Line_Items": [
    {
      "item": "item_1",
      "quantity": 5,
      "price": 100,
      "total": 500
    },
    {
      "item": "item_2",
      "quantity": 10,
      "price": 50,
      "total": 500
    },
    {
      "item": "item_3",
      "quantity": 6,
      "price": 10,
      "total": 60
    }
  ]
}

Exact Match Details:
Total fields: 19
Matched fields: 18

Current State:
Exact Match: 0.9474
Similarity: 0.9793
NEW ITERATION BEGINS.....................................

Exact Match Details:
Total fields: 19
Matched fields: 18

Step 1

Updated Prompt: 
### Revised Instruction Prompt:

### Instructions:
You are a data extraction tool designed to extract data from each page of an invoice and format it according to a specified JSON schema.

1. **Output Format**: Please ensure that the output strictly adheres to JSON formatting. All keys and string values must be enclosed in double quotes.

2. **Key-Value Pair Structure**: Extract all key-value pairs from the invoice and format them as JSON objects. All keys must be strings enclosed in double quotes.

3. **Table Extraction**: If there are tables in the invoice, capture all rows and columns in the JSON object. Maintain the table structure by using arrays for rows and ensuring that each column is represented as a key in the JSON object, even if it is blank. For blank columns, include the key with a null value.

4. **Handling Missing Data**: If a row is blank, denote missing fields with "null" values. It is crucial to include null values for any missing fields or blank columns to accurately reflect the invoice data.

5. **Empty Invoice Handling**: If the page contains no charge data, please output an empty JSON object (`{}`) and do not fabricate any data.

6. **No Data Interpolation**: Do not interpolate or make up data. Only extract and format the information present in the invoice.

7. **Maintain Structure**: Ensure that the order of key-value pairs and tabular data aligns with the original text of the invoice. The output should be a valid JSON object that mirrors the structure of the invoice, including proper nesting and array formatting.

8. **Example Output**: For reference, here is an example of the expected JSON output format:
   ```json
   {
       "Invoice_Number": "12345",
       "Date": "2023-10-01",
       "Line_Items": [
           {
               "Description": "Item 1",
               "Quantity": 2,
               "Price": 10.00
           },
           {
               "Description": "Item 2",
               "Quantity": 1,
               "Price": null
           }
       ],
       "Total": 20.00
   }
   ```

Please perform the task as per the above instructions on the following invoice document.
	
	
### INPUT invoice:
	

-----------------Invoice------------------
                              Page 1 of 3

Invoice Number: INV-12345
Customer: XYZ Corp
Invoice Date: 2024-06-01


Item    Quantity    Price     Total
item_1     5         $100      500
item_2     10        $50       500
item_3     6         $10       60

					Subtotal: 1060
					Total GST: 500
					Total Amount: $1560
--------------------------------------------

	
### OUTPUT JSON SCHEMA:


	
{'invoice_number': 'string', 'customer': 'string', 'invoice_date': 'yyyy-mm-dd', 'sub_total': 'number', 'total_GST': 'number', 'total_amount': 'number', 'Line_Items': [{'item': 'string', 'quantity': 'number', 'price': 'number', 'total': 'number'}]}

	
Last_output: {
  "invoice_number": "INV-12345",
  "customer": "XYZ Corp",
  "invoice_date": "2024-06-01",
  "sub_total": 1060,
  "total_GST": 500,
  "total_amount": 1560,
  "Line_Items": [
    {
      "item": "item_1",
      "quantity": 5,
      "price": 100,
      "total": 500
    },
    {
      "item": "item_2",
      "quantity": 10,
      "price": 50,
      "total": 500
    },
    {
      "item": "item_3",
      "quantity": 6,
      "price": 10,
      "total": 60
    }
  ]
}
Current Scores - Exact Match: 0.9474, Similarity: 0.9793
Best Scores    - Exact Match: 0.9474, Similarity: 0.9793

Action taken: 3
Reward: 0.0000

Terminated: False
Total Return: 0.0000
Metrics: {'exact_match': 0.9473684210526315, 'similarity': 0.9792520626545262, 'best_exact_match': 0.9473684210526315, 'best_similarity': 0.9792520626545262, 'improved': False, 'non_improvement_count': 1, 'steps': 1}

Current State:
Exact Match: 0.9474
Similarity: 0.9793
NEW ITERATION BEGINS.....................................

Exact Match Details:
Total fields: 19
Matched fields: 18

Step 2

Updated Prompt: 
### Revised Instruction Prompt:

### Instructions:
You are a data extraction tool designed to extract data from each page of an invoice and format it according to a specified JSON schema.

1. **Output Format**: Please ensure that the output is a valid JSON object. All keys and string values must be enclosed in double quotes, following standard JSON formatting.

2. **Key Naming Conventions**: The keys in the JSON output must match the case and naming conventions used in the expected ground truth. For example, if the expected output uses snake_case (e.g., `invoice_number`), ensure that the keys follow this convention.

3. **Key-Value Pair Structure**: Extract all key-value pairs from the invoice and format them as JSON objects. All keys must be strings enclosed in double quotes.

4. **Table Extraction**: If there are tables in the invoice, capture all rows and columns in the JSON object. Maintain the table structure by using arrays for rows and ensuring that each column is represented as a key in the JSON object, even if it is blank. For blank columns, include the key with a null value.

5. **Handling Missing Data**: If a row is blank, denote missing fields with "null" values. It is crucial to include null values for any missing fields or blank columns to accurately reflect the invoice data.

6. **Empty Invoice Handling**: If the page contains no charge data, please output an empty JSON object (`{}`) and do not fabricate any data.

7. **No Data Interpolation or Alterations**: Do not interpolate or make up data. Only extract and format the information present in the invoice. Additionally, do not alter the structure or naming of the keys, including their case or format.

8. **Maintain Structure**: Ensure that the order of key-value pairs and tabular data aligns with the original text of the invoice. The output should mirror the structure of the invoice, including proper nesting and array formatting.

9. **Example Output**: For reference, here is an example of the expected JSON output format:
   ```json
   {
       "invoice_number": "12345",
       "date": "2023-10-01",
       "line_items": [
           {
               "description": "Item 1",
               "quantity": 2,
               "price": 10.00
           },
           {
               "description": "Item 2",
               "quantity": 1,
               "price": null
           }
       ],
       "total": 20.00
   }
   ```

Please perform the task as per the above instructions on the following invoice document.
	
	
### INPUT invoice:
	

-----------------Invoice------------------
                              Page 1 of 3

Invoice Number: INV-12345
Customer: XYZ Corp
Invoice Date: 2024-06-01


Item    Quantity    Price     Total
item_1     5         $100      500
item_2     10        $50       500
item_3     6         $10       60

					Subtotal: 1060
					Total GST: 500
					Total Amount: $1560
--------------------------------------------

	
### OUTPUT JSON SCHEMA:


	
{'invoice_number': 'string', 'customer': 'string', 'invoice_date': 'yyyy-mm-dd', 'sub_total': 'number', 'total_GST': 'number', 'total_amount': 'number', 'Line_Items': [{'item': 'string', 'quantity': 'number', 'price': 'number', 'total': 'number'}]}

	
Last_output: {
  "invoice_number": "INV-12345",
  "customer": "XYZ Corp",
  "invoice_date": "2024-06-01",
  "sub_total": 1060,
  "total_GST": 500,
  "total_amount": 1560,
  "Line_Items": [
    {
      "item": "item_1",
      "quantity": 5,
      "price": 100,
      "total": 500
    },
    {
      "item": "item_2",
      "quantity": 10,
      "price": 50,
      "total": 500
    },
    {
      "item": "item_3",
      "quantity": 6,
      "price": 10,
      "total": 60
    }
  ]
}
Current Scores - Exact Match: 0.9474, Similarity: 0.9793
Best Scores    - Exact Match: 0.9474, Similarity: 0.9793

Terminating due to no improvements in last two updates
Best Results Achieved:
Exact Match: 0.9474
Similarity: 0.9793
Best Prompt:
 ### Instructions:
You are a data extraction tool capable of extracting data from each page of an invoice.

1. Please extract the data in this invoice and format it to the given output JSON schema.

2. Extract all key-value pairs from the invoice.

3. If there are tables in the invoice, capture all of the rows and columns in the JSON object. 
Even if a column is blank, include it as a key in the JSON object with a null value.

4. If a row is blank denote missing fields with "null" values.

5. If the page contains no charge data, please output an empty JSON object and don't make up any data.

6. Don't interpolate or make up data.

7. Please maintain the table structure of the charges, i.e. capture all of the rows and columns in the JSON object.

8. Ensuring the order of key-value pairs and tabular data aligns with the original text.


The language model must interpret and execute these extraction and formatting instructions accurately.

Perform the task as per above instructions on the following invoice document:

Best Output:
 {
  "invoice_number": "INV-12345",
  "customer": "XYZ Corp",
  "invoice_date": "2024-06-01",
  "sub_total": 1060,
  "total_GST": 500,
  "total_amount": 1560,
  "Line_Items": [
    {
      "item": "item_1",
      "quantity": 5,
      "price": 100,
      "total": 500
    },
    {
      "item": "item_2",
      "quantity": 10,
      "price": 50,
      "total": 500
    },
    {
      "item": "item_3",
      "quantity": 6,
      "price": 10,
      "total": 60
    }
  ]
}

Action taken: 3
Reward: 0.0000

Terminated: True
Total Return: 0.0000
Metrics: {'exact_match': 0.9473684210526315, 'similarity': 0.9792520626545262, 'best_exact_match': 0.9473684210526315, 'best_similarity': 0.9792520626545262, 'improved': False, 'non_improvement_count': 2, 'steps': 2}

Task completed successfully!